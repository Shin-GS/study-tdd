Mockito
 - 개발자가 동작을 직접적으로 제어할 수 있는 가짜 객체를 지원하는 테스트 프레임워크
 - Spring 어플리케이션은 여러 객체들 간의 의존성이 생기는데
   이러한 의존성을 Mockito를 이용해서 단절시킴으로써 단위 테스트를 쉽게 작성할 수 있다.

ex)서비스 단위 테스트
@ExtendWith(MockitoExtension.class)
class MemberServiceTest {
    @Mock
    private MemberRepository memberRepository;

    @InjectMocks
    private MemberService memberService;

    /*
        MemberService.class
        public Member createMember(Member member) {
            Optional<Member> findMember = memberRepository.findByEmail(email);
            if(findMember.isPresent()) {
                throw new ServiceLogicException(ErrorCode.MEMBER_EXISTS);
            }

            return memberRepository.save(member);
        }
    */

    @Test
    @DisplayName("중복 회원 생성시 예외 발생 - 이메일 조회")
    void createMemberException() {
        // Given
        Long memberId = 1L;
        Member testMember = createTestMember(memberId);
        when(memberRepository.findByEmail(anyString()))
            .thenReturn(Optional.of(testMember));

        // When
        Throwable throwable = catchThrowable(() -> memberService.createMember(Member.builder()
            .email("PreventNull")
            .build())
        );

        // Then
        assertThat(throwable)
            .isInstanceOf(ServiceLogicException.class)
            .hasMessageContaining(ErrorCode.MEMBER_EXISTS.getMessage());
    }
}

ex)컨트롤러 단위 테스트
@WebMvcTest(MemberController.class)
@MockBean(JpaMetamodelMappingContext.class)
public class MemberControllerRestDocsTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private MemberService memberService;

    @MockBean
    private MemberMapper mapper;

    @Autowired
    private Gson gson;

    @Test
    @DisplayName("POST 회원 등록 컨트롤러 로직 확인")
    public void postMemberTest() throws Exception {
        // Given
        MemberDto.Post post = new MemberDto.Post("hgd@gmail.com", "홍길동", "010-1234-5678");
        String content = gson.toJson(post);
        MemberDto.response responseDto = new MemberDto.response(1L,
            "hgd@gmail.com",
            "홍길동",
            "010-1234-5678",
            Member.MemberStatus.MEMBER_ACTIVE,
            new Stamp()
        );

        given(mapper.memberPostToMember(Mockito.any(MemberDto.Post.class))).willReturn(new Member()); //mock
        given(memberService.createMember(Mockito.any(Member.class))).willReturn(new Member());
        given(mapper.memberToMemberResponse(Mockito.any(Member.class))).willReturn(responseDto);

        // When
        ResultActions actions = mockMvc.perform(post("/members")
            .accept(MediaType.APPLICATION_JSON)
            .contentType(MediaType.APPLICATION_JSON)
            .content(content)
        );

        // Then
        actions
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.data.email").value(post.getEmail()))
                .andExpect(jsonPath("$.data.name").value(post.getName()))
                .andExpect(jsonPath("$.data.phone").value(post.getPhone()));
    }
}
