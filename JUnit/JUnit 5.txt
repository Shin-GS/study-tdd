JUnit 5
 - 단위 테스트를 위한 테스트 프레임워크
 - JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage
   JUnit Platform : 테스트를 실행해주는 런처 제공, TestEngine API 정의
   JUnit Jupiter : TestEngine API 구현체로 JUnit 5 제공
   JUnit Vintage : JUnit 4와 JUnit 43을 지원하는 TestEngine 구현체
 - 좋은 라이브러리지만 but! AssertJ 사용을 권장함

1)JUnit 5 주요 어노테이션
 - @BeforeEach : 테스트 메서드 실행 이전에 매번 실행
 - @AfterEach : 테스트 메소드 실행 이후에 실행
 - @BeforeAll : 현재 클래스의 모든 테스트 메소드 실행 이전에 한번만 실행
 - @AfterAll : 현재 클래스의 모든 테스트 메소드 실행 이후에 한번만 실행
 - @BeforeAll, @AfterAll은 static으로 선언되어야 한다.
 - @DisplayName : 테스트 클래스나 메소드에 사용자 정의 이름 지정 가능
 - @Disabled : 테스트를 비활성시켜서 skip 할 수 있도록 함
 - ex)@BeforeAll
       static void setup() {
	System.out.println("@BeforeAll - executes once before all test methods in this class");
       }

2)JUnit 5 Assertions
 - JUnit Jupiter는 JUnit 4에서 제공하는 Assertions 기능과 더불어 Java 8의 lambda를 지원하는 Assertions이 추가됨
 - ex)assertTrue(numbers.stream().mapToInt(i -> i).sum() > 5, () -> "Sum should be greater than 5");

3)JUnit 5 Assumptions
 - Assumptions은 특정 조건이 충족될 때만 테스트를 실행한다.
 - 즉 특정 조건을 만족하지 않으면 테스트를 더 이상 진행하지 않는다.
 - 일반적으로 테스트가 제대로 실행하기 위한 필요한 외부조건에 사용된다. ex)Dev 환경에서만 테스트
 - assumeTrue(), assumeFalse(), assumingThat()
 - ex)assumeTrue("DEV".equals(System.getenv("ENV")));

4)Junit 5 Exception Test
 - 예외 테스트는 아래 두 방법을 통해 가능하다.
 - assertThrows 사용
 - assertEquals로 에러 메시지 비교
 - ex)assertThrows(IllegalArgumentException.class, () -> {
	Integer.valueOf(str);
        });

ex)
public class SampleSuccessTests {
    @BeforeAll
    static void setup() {
        System.out.println("@BeforeAll - executes once before all test methods in this class");
    }

    @AfterAll
    static void tearDownAll() {
        System.out.println("@AfterAll - executed after all test methods.");
    }

    @BeforeEach
    void init() {
        System.out.println("@BeforeEach - executes before each test method in this class");
    }

    @AfterEach
    void tearDown() {
        System.out.println("@AfterEach - executed after each test method.");
    }

    @Test
    void successTest1() {
        System.out.println("executes successTest1");
        assumeTrue("abc".contains("a"));
    }

    @Test
    void successTest2() {
        System.out.println("executes successTest2");
        assumeTrue("abc".contains("b"));
    }

    @Test
    void lambdaExpressions() {
        List numbers = Arrays.asList(1, 2, 3);
        assertTrue(numbers.stream()
          .mapToInt(i -> i)
          .sum() > 5, () -> "Sum should be greater than 5");
    }

    @Test
    void groupAssertions() {
        int[] numbers = {0, 1, 2, 3, 4};
        assertAll("numbers",
            () -> assertEquals(numbers[0], 1),
            () -> assertEquals(numbers[3], 3),
            () -> assertEquals(numbers[4], 1)
        );
    }

    @Test
    void testOnlyOnDevServer() {
        // DEV 환경 에서만 test 실행
        assumeTrue("DEV".equals(System.getenv("ENV")));
        assertEquals(1, "a".length(), "is always equal");
    }

    @Test
    void assertThrowsException() {
        String str = null;
        assertThrows(IllegalArgumentException.class, () -> {
            Integer.valueOf(str);
        });
    }

    @Test
    void shouldThrowException() {
        Exception exception = assertThrows(ArithmeticException.class, () -> {
            int divide = 1/0;
        });
        assertEquals("/ by zero", exception.getMessage());
    }
}




