ParameterizedTest
 - 한 개의 로직에 대해 다른 데이터에 따라 테스트를 진행하여 여러번 테스트를 실행하는 경우가 존재함
 - JUnit에서는 @ParameterizedTest라는 어노테이션으로 해당 기능을 제공한다.
   이때, 파라미터로 넘겨줄 값들을 지정해 줄 수 있다.

*@ParameterizedTest를 이용하면 여러 개의 테스트 케이스를 사용할 수 있다.
 - @ValueSource: 한 개의 인수 입력 시 사용
 - @CsvSource: 한 개의 인수와 해당 인수를 넣었을 때의 결과값 입력 시 사용
 - @NullSource, @EmptySource, @NullOrEmptySource: null 또는 공백값에 대한 테스트 시 사용
 - @EnumSource: Enum 값에 대한 테스트 시 사용
 - @MethodSource: 테스트에 복잡한 인수를 제공하고자 할 때 메소드를 만들어서 사용

1)@ValueSource
 - 테스트에 주입할 값을 어노테이션에 배열로 지정한다.
 - 테스트를 실행하면 배열을 순회하면서, 테스트 메소드에 인수로 배열에 지정된 값들을 주입해서 테스트한다.
   이때, 하나의 테스트에는 하나의 인수(argumnet)만 전달할 수 있다.
 - @ValueSource에 사용할 수 있는 자료형은 다음과 같다.
   byte, short, int, long, float, double, char, boolean, String, Class
 - ex)
@ParameterizedTest
@DisplayName("ValueSource를 이용한 User 생성 테스트")
@ValueSource(strings = {"", " "})
void createUserException(String text) {
    assertThatThrownBy(() -> new User(text))
        .isInstanceOf(IllegalArgumentException.class);
}

2)@CsvSource
 - 입력값, 기대값을 테스트하는 경우 @ValueSource 만으로는 힘들다.
   이때 @CsvSource를 사용할 수 있다.
 - "{input},{expected}"의 형태로 구분자가 있는 문자열을 입력할 수 있다.
 - 물론 value 다음에 delimiter 값을 직접 정의해서 넣어줘서 커스텀 구분자를 사용할 수도 있다.
   단 이 때 주의할 것은 delimiter 값은 String이 아닌 char 값이기 때문에 반드시 단일 문자를 넣어주어야 한다는 점이다.
   만약 String을 넣어주고 싶다면 delimiterString 값을 지정해서 넣어주면 된다.
 - ex)
@ParameterizedTest
@CsvSource(value = {"1:2", "2:4", "3:6"}, delimiter = ':') //delimiterString = "//"
void multiplyBy2Test(int input, int expected) {
    assertThat(multiplyBy2(input)).isEqualTo(expected);
}

3)@NullSource, @EmptySource, @NullAndEmptySource
 - @NullSource는 테스트 메소드에 인수로 null을, @EmptySource는 빈 값을, @NullAndEmptySource는 null과 빈 값을 모두 주입한다.
 - 이때, 원시값(위의 byte ~ boolean)에는 null 값이 들어갈 수 없으므로 메소드의 인수가 원시 값이라면 @NullScore, @NullAndEmptySource는 사용이 불가능하다.
 - @NullSource @EmptySource를 모두 사용한 것과 @NullAndEmptySource는 같다.
 - @ValueSource와 같이 사용이 가능하다.
 - ex)
@ParameterizedTest
@DisplayName("null 값 또는 empty 값으로 User 생성 테스트")
@NullAndEmptySource
void createUserExceptionFromNullOrEmpty(String text) {
    assertThatThrownBy(() -> new User(text))
        .isInstanceOf(IllegalArgumentException.class);
}

4)@EnumSource
 - Enum 클래스의 모든 값을 사용하려면 @EnumSource 안에 Enum 클래스만 전달해주면 되고
   특정 값만 필요할 경우 value에 Enum 클래스를 넣어주고 names에 선택할 값의 이름을 전달해주면 된다.
 - 이 때 names까지 값을 넣으면 추가로 mode 값을 넣어줄 수 있다.
   INCLUDE, EXCLUDE, MATCH_ALL, MATCH_ANY
 - ex)
@ParameterizedTest
@DisplayName("6, 7월이 31일까지 있는지 테스트")
@EnumSource(value = Month.class, names = {"JUNE", "JULY"})
void isJuneAndJuly31(Month month) {
    assertThat(month.minLength()).isEqualTo(31);
}

5)@MethodSource
 - 복잡한 object를 전달하기 위해 method를 인수로 전달해줄 수 있다.
 - @MethodSource에 작성하는 메소드 이름은 인수로 제공하려는 메소드 이름과 같아야 한다.
 - 인수로 제공하려는 메소드는 static 이어야 한다.
   단, @TestInstance(Lifecycle.PER_CLASS)를 사용하여 클래스 단위 생성주기일 경우 인스턴스 메소드 제공이 가능하다.
 - @MethodSource에 메소드 이름을 작성해주지 않을 경우 JUnit이 테스트 메소드 네임과 같은 메소드를 찾아서 인수로 제공한다.
 - 만약 테스트 호출 당 하나의 인수만 제공하고자 한다면 Arguments로 추상화 할 필요는 없다.
 - ex)
@ParameterizedTest
@MethodSource("provideStringsForIsBlank")
void isBlank_ShouldReturnTrueForBlankStrings(String input, boolean expected) {
    assertThat(input.isBlank()).isEqualTo(expected);
}
private static Stream<Arguments> provideStringsForIsBlank() {
    return Stream.of(
        Arguments.of("", true),
        Arguments.of("  ", true),
        Arguments.of("not blank", false)
    );
}